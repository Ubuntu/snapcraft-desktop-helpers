###############################################
# Launcher common exports for any desktop app #
###############################################

needs_update=true

. ~/.last_revision 2>/dev/null || true
if [ "$SNAP_DESKTOP_LAST_REVISION" = "$SNAP_REVISION" ]; then
  needs_update=false
fi
[ $needs_update = true ] && echo "SNAP_DESKTOP_LAST_REVISION=$SNAP_REVISION" > ~/.last_revision

if [ "$SNAP_ARCH" == "amd64" ]; then
  ARCH="x86_64-linux-gnu"
elif [ "$SNAP_ARCH" == "armhf" ]; then
  ARCH="arm-linux-gnueabihf"
elif [ "$SNAP_ARCH" == "arm64" ]; then
  ARCH="aarch64-linux-gnu"
else
  ARCH="$SNAP_ARCH-linux-gnu"
fi

export SNAP_LAUNCHER_ARCH_TRIPLET=$ARCH

if [ -d $SNAP/gnome-runtime ]; then
  if [ ! -d $SNAP/gnome-runtime/usr ]; then
    echo "You need to connect the snap to the gnome-runtime interface."
    echo ""
    echo "You can do this with those commands:"
    echo "snap install gnome318-udt"
    echo "snap connect $SNAP_NAME:gnome318-runtime gnome318-udt:gnome318-runtime"
    echo ""
    echo "(the '318' number defines the runtime version and might change)"
    exit 1
  else
    RUNTIMEDIR=$SNAP/gnome-runtime
    export LD_LIBRARY_PATH=$RUNTIMEDIR/usr/lib/$ARCH:$LD_LIBRARY_PATH
    export PATH=$RUNTIMEDIR/usr/bin:$PATH
  fi
else
  RUNTIMEDIR=$SNAP
fi

# XKB config
export XKB_CONFIG_ROOT=$RUNTIMEDIR/usr/share/X11/xkb

# Mesa Libs for OpenGL support
export LD_LIBRARY_PATH=$RUNTIMEDIR/usr/lib/$ARCH/mesa:$LD_LIBRARY_PATH
export LD_LIBRARY_PATH=$RUNTIMEDIR/usr/lib/$ARCH/mesa-egl:$LD_LIBRARY_PATH

# Tell libGL where to find the drivers
export LIBGL_DRIVERS_PATH=$RUNTIMEDIR/usr/lib/$ARCH/dri
export LD_LIBRARY_PATH=$LIBGL_DRIVERS_PATH:$LD_LIBRARY_PATH

# Workaround in snapd for proprietary nVidia drivers mounts the drivers in
# /var/lib/snapd/lib/gl that needs to be in LD_LIBRARY_PATH
# Without that OpenGL using apps do not work with the nVidia drivers.
# Ref.: https://bugs.launchpad.net/snappy/+bug/1588192
export LD_LIBRARY_PATH=/var/lib/snapd/lib/gl:$LD_LIBRARY_PATH

# Tell where to find the client libraries for Mir
export MIR_CLIENT_PLATFORM_PATH=$RUNTIMEDIR/usr/lib/$ARCH/mir/client-platform

# Pulseaudio export
##export LD_LIBRARY_PATH=$RUNTIMEDIR/usr/lib/$ARCH/pulseaudio:$LD_LIBRARY_PATH

# Tell GStreamer where to find its system plugins
export GST_PLUGIN_SYSTEM_PATH=$RUNTIMEDIR/usr/lib/$ARCH/gstreamer-1.0

# XDG Config
export XDG_CONFIG_DIRS=$RUNTIMEDIR/etc/xdg:$RUNTIMEDIR/usr/xdg:$XDG_CONFIG_DIRS

# Define snaps' own data dir
export XDG_DATA_DIRS=$SNAP_USER_DATA:$RUNTIMEDIR/usr/share:$XDG_DATA_DIRS

# Set XDG_DATA_HOME to local path
export XDG_DATA_HOME=$SNAP_USER_DATA/.local/share
export XDG_DATA_DIRS=$XDG_DATA_HOME:$XDG_DATA_DIRS
mkdir -p $XDG_DATA_HOME

# Set cache folder to local path
export XDG_CACHE_HOME=$SNAP_USER_DATA/.cache
mkdir -p $XDG_CACHE_HOME

# GI repository
export GI_TYPELIB_PATH=$RUNTIMEDIR/usr/lib/girepository-1.0:$RUNTIMEDIR/usr/lib/$ARCH/girepository-1.0

# Font Config and themes
export FONTCONFIG_PATH=$RUNTIMEDIR/etc/fonts/conf.d
export FONTCONFIG_FILE=$RUNTIMEDIR/etc/fonts/fonts.conf
if [ $needs_update = true ]; then
  rm -rf $XDG_DATA_HOME/{fontconfig,fonts,fonts-*,themes,.themes}
  ln -sf $RUNTIMEDIR/usr/share/{fontconfig,fonts,fonts-*,themes} $XDG_DATA_HOME
  ln -sfn $RUNTIMEDIR/usr/share/themes $SNAP_USER_DATA/.themes
fi

# Build mime.cache
# needed for gtk and qt icon
if [ $needs_update = true ]; then
  rm -rf $XDG_DATA_HOME/mime
  if [ `which update-mime-database` ]; then
    cp --preserve=timestamps -dR $RUNTIMEDIR/usr/share/mime $XDG_DATA_HOME
    update-mime-database $XDG_DATA_HOME/mime
  fi
fi

# Ensure the app finds locale definitions (requires locales-all to be installed)
export LOCPATH=$RUNTIMEDIR/usr/lib/locale

# Gio modules and cache (including gsettings module)
export GIO_MODULE_DIR=$XDG_CACHE_HOME/gio-modules
function compile_giomodules {
  if [ -f $1/glib-2.0/gio-querymodules ]; then
    rm -rf $GIO_MODULE_DIR
    mkdir -p $GIO_MODULE_DIR
    ln -s $1/gio/modules/*.so $GIO_MODULE_DIR
    $1/glib-2.0/gio-querymodules $GIO_MODULE_DIR
  fi
}
if [ $needs_update = true ]; then
  compile_giomodules $RUNTIMEDIR/usr/lib/$ARCH
fi

# Keep an array of data dirs, for looping through them
IFS=':' read -r -a data_dirs_array <<< "$XDG_DATA_DIRS"

# Setup compiled gsettings schema
GS_SCHEMA_DIR=$XDG_DATA_HOME/glib-2.0/schemas
function compile_schemas {
  if [ -f "$1" ]; then
    rm -rf $GS_SCHEMA_DIR
    mkdir -p $GS_SCHEMA_DIR
    for d in "${data_dirs_array[@]}"; do
      schema_dir=$d/glib-2.0/schemas
      if [ "$(ls -A $schema_dir/*.xml 2>/dev/null)" ]; then
        ln -s $schema_dir/*.xml $GS_SCHEMA_DIR
      fi
    done
    "$1" $GS_SCHEMA_DIR
  fi
}
if [ $needs_update = true ]; then
  compile_schemas $RUNTIMEDIR/usr/lib/$ARCH/glib-2.0/glib-compile-schemas
fi

# Enable gsettings user changes
# symlink the dconf file if home plug is connected for read
DCONF_DEST_USER_DIR=$SNAP_USER_DATA/.config/dconf
if [ ! -f $DCONF_DEST_USER_DIR/user ]; then
  if [ -f /home/$USER/.config/dconf/user ]; then
    mkdir -p $DCONF_DEST_USER_DIR
    ln -s /home/$USER/.config/dconf/user $DCONF_DEST_USER_DIR
  fi
fi
